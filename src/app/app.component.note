<mat-progress-bar mode="indeterminate" *ngIf="isLoading$ | async"></mat-progress-bar>
<div class="flex flex-col h-screen">
  <!-- header -->
  <app-header [(isScrolled)]="isScrolled"
              [(isSidebarMinimized)]="isSidebarMinimized"
              [(isNotificationPanelOpen)]="isNotificationPanelOpen"></app-header>

  <!-- main -->
  <!-- main -->
  <div class="flex flex-1 pt-24">
    <!-- sidebar -->
    <aside [ngClass]="{'w-64': !isSidebarMinimized(), 'w-16': isSidebarMinimized()}"
           class="text-slate-500 h-full fixed z-10 transition-all duration-500 ease-in-out overflow-hidden">
      <div class="h-full overflow-y-auto">
        <ul>
          @for (item of menuItems; track item) {
            <li class="mt-5 w-full">
              <a #menuLink class="text-sm my-0 mx-4 flex items-center whitespace-nowrap px-4"
                 [routerLink]="item.link">
                <div class="icon-container shadow-md shadow-slate-400 w-8 min-w-8 h-8 mr-2 bg-white
                text-slate-500 rounded-md flex items-center justify-center
                hover:scale-110 hover:shadow-lg hover:duration-300" style="z-index: 9;">
                  <fa-icon [icon]="item.icon"></fa-icon>
                </div>
                <span #menuText class="ml-1 text-sm" style="z-index: 1;">{{ item.label }}</span>
              </a>
            </li>
          }
        </ul>
      </div>
    </aside>

    <!-- main -->
    <div [ngClass]="{'ml-64': !isSidebarMinimized(), 'ml-16': isSidebarMinimized()}"
         class="flex-1 overflow-y-auto p-4 transition-all duration-500 ease-in-out"
         [ngStyle]="{'margin-right': isNotificationPanelOpen() ? '256px' : '0', 'min-height': 'calc(100vh - 11rem)'}">
      <main>
        <router-outlet/>
      </main>
    </div>

    <!-- notification -->
    <aside class="bg-white text-slate-500 h-full fixed right-0 w-64 z-10
           transition-transform duration-300 ease-in-out rounded-l-lg my-4"
           [ngClass]="{'transform translate-x-0': isNotificationPanelOpen(), 'transform translate-x-full': !isNotificationPanelOpen()}">
      <div class="h-full overflow-y-auto">
        <app-notification-center></app-notification-center>
      </div>
    </aside>
  </div>

  <!-- Footer -->
  <div [ngClass]="{'ml-64': !isSidebarMinimized(), 'ml-16': isSidebarMinimized()}"
       class="mt-auto flex-1 py-4 transition-all duration-500 ease-in-out"
       [ngStyle]="{'margin-right': isNotificationPanelOpen() ? '256px' : '0'}">
    <app-footer></app-footer>
  </div>
</div>


private animateSidebarText2(): void {
    if (this.isSidebarMinimized()) {
      anime({
        targets: this.menuTextElements.toArray().map((el: ElementRef<any>) => {
          return el.nativeElement;
        }),
        translateX: [0, -100], // Sposta da 0 a -100 (fuori dalla vista)
        opacity: {
          value: [1, 0],
          easing: 'easeInOutQuad',
          delay: 50
        },
        easing: 'easeInOutQuad',
        duration: 350,
        delay: anime.stagger(50)
      });

      this.menuLinkElements.forEach((link: ElementRef<any>) => {
        link.nativeElement.classList.add('translate-4');
        link.nativeElement.classList.remove('translate-1');
      });

      anime({
        targets: this.menuLinkElements.toArray().map((el: ElementRef<any>) => el.nativeElement),
        translateX: [0, -16], // Sposta da 0 a -16px (compensazione del margine)
        easing: 'easeInOutQuad',
        duration: 350,
        complete: () => {
          // Rimuovi la classe di trasformazione finale
          this.menuLinkElements.forEach((link: ElementRef<any>) => {
            link.nativeElement.classList.remove('translate-4');
            link.nativeElement.classList.add('translate-1');
          });
        }
      });

    } else {
      anime({
        targets: this.menuTextElements.toArray().map((el: ElementRef<any>) => el.nativeElement),
        translateX: [-100, 0], // Sposta da -100 a 0 (di nuovo visibile)
        // opacity: [0, 1],
        easing: 'easeInOutQuad',
        duration: 350,
        delay: anime.stagger(50)
      });

      this.menuLinkElements.forEach((link: ElementRef<any>) => {
        link.nativeElement.classList.add('translate-1');
        link.nativeElement.classList.remove('translate-4');
      });

      anime({
        targets: this.menuLinkElements.toArray().map((el: ElementRef<any>) => el.nativeElement),
        translateX: [-16, 0], // Sposta da -16px a 0 (compensazione del margine)
        easing: 'easeInOutQuad',
        duration: 350,
        complete: () => {
          // Rimuovi la classe di trasformazione finale
          this.menuLinkElements.forEach((link: ElementRef<any>) => {
            link.nativeElement.classList.remove('translate-1');
            link.nativeElement.classList.add('translate-4');
          });
        }
      });

    }
  }
